Parameters:
  ProjectName:
    Type: String
    Description: Project name to link stacks
  ServiceAImage:
    Type: String
    Description: Service A container image
  ServiceAContainerPort:
    Type: Number
    Description: Port number to use for Service A
  ServiceCImage:
    Type: String
    Description: Service C container image
  ServiceCContainerPort:
    Type: Number
    Description: Port number to use for Service C
  Priority:
    Type: Number
    Description: ALB Rule priority
    Default: 1
  TargetGroupNameA:
    Type: String
    Description: ALB TargetgroupName
    Default: serviceA-tg
  TargetGroupNameC:
    Type: String
    Description: ALB TargetgroupName
    Default: serviceC-tg
  HTTPHeaderValue:
    Type: String
    Description: HTTP Header Value
    Default: Weighted-User-Agent
  TaskDefFamilyNameA:
    Type: String
    Description: Service A Task Definition Family Name
    Default: serviceA-family
  TaskDefFamilyNameC:
    Type: String
    Description: Service C Task Definition Family Name
    Default: serviceC-family
  ServiceNameA:
    Type: String
    Description: Service A Name
    Default: svc-A
  ServiceNameC:
    Type: String
    Description: Service C Name
    Default: svc-C
  ContainerNameA:
    Type: String
    Description: Container Name
    Default: serviceA
  ContainerNameC:
    Type: String
    Description: Container Name
    Default: serviceC
Resources:
  ServiceATargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: '/service/healthcheck'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref TargetGroupNameA
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 120
      VpcId:
        Fn::ImportValue:
          !Sub '${ProjectName}:VPC'
  ServiceCTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: '/service/healthcheck'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref TargetGroupNameC
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 120
      VpcId:
        Fn::ImportValue:
          !Sub '${ProjectName}:VPC'
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref ServiceATargetGroup
            Weight: 1
          - TargetGroupArn: !Ref ServiceCTargetGroup
            Weight: 1
      Conditions:
      - Field: path-pattern
        Values:
        - '/service/*'
      - Field: http-header
        HttpHeaderConfig:
          HttpHeaderName: User-Agent
          Values:
          - !Ref HTTPHeaderValue
      ListenerArn: 
        Fn::ImportValue:
          !Sub '${ProjectName}:PublicLoadBalancerListener'
      Priority: !Ref Priority

  ServiceATaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
      - 'FARGATE'
      TaskRoleArn: 
        Fn::ImportValue:
          !Sub '${ProjectName}:TaskIamRole'
      NetworkMode: 'awsvpc'
      Family: !Ref TaskDefFamilyNameA
      ExecutionRoleArn: 
        Fn::ImportValue:
          !Sub '${ProjectName}:TaskExecutionIamRole'
      Cpu: 1024
      Memory: 2048
      ContainerDefinitions:
      - Name: !Ref ContainerNameA
        Image: !Ref ServiceAImage
        Essential: true
        PortMappings:
        - ContainerPort: !Ref ServiceAContainerPort
          Protocol: 'tcp'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Sub '${ProjectName}-log-group'
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: !Ref ContainerNameA
  
  ServiceCTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
      - 'FARGATE'
      TaskRoleArn: 
        Fn::ImportValue:
          !Sub '${ProjectName}:TaskIamRole'
      NetworkMode: 'awsvpc'
      Family: !Ref TaskDefFamilyNameC
      ExecutionRoleArn: 
        Fn::ImportValue:
          !Sub '${ProjectName}:TaskExecutionIamRole'
      Cpu: 1024
      Memory: 2048
      ContainerDefinitions:
      - Name: !Ref ContainerNameC
        Image: !Ref ServiceCImage
        Essential: true
        PortMappings:
        - ContainerPort: !Ref ServiceCContainerPort
          Protocol: 'tcp'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Sub '${ProjectName}-log-group'
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: !Ref ContainerNameC

  ServiceAECSService:
    Type: AWS::ECS::Service
    DependsOn:
    - ListenerRule
    Properties:
      TaskDefinition: !Ref ServiceATaskDef
      LaunchType: FARGATE
      PlatformVersion: LATEST
      Cluster: 
        Fn::ImportValue:
          !Sub '${ProjectName}:ECSCluster'
      ServiceName: !Ref ServiceNameA
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS  #Rolling update      
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Fn::ImportValue:
              !Sub '${ProjectName}:TaskSecurityGroup'
          Subnets:
          - Fn::ImportValue:
              !Sub '${ProjectName}:PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${ProjectName}:PrivateSubnet2'
      HealthCheckGracePeriodSeconds: 150
      LoadBalancers:
      - ContainerName: !Ref ContainerNameA
        ContainerPort: !Ref ServiceAContainerPort
        TargetGroupArn: !Ref ServiceATargetGroup
  
  ServiceCECSService:
    Type: AWS::ECS::Service
    DependsOn:
    - ListenerRule
    Properties:
      TaskDefinition: !Ref ServiceCTaskDef
      LaunchType: FARGATE
      PlatformVersion: LATEST
      Cluster: 
        Fn::ImportValue:
          !Sub '${ProjectName}:ECSCluster'
      ServiceName: !Ref ServiceNameC
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS  #Rolling update      
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Fn::ImportValue:
              !Sub '${ProjectName}:TaskSecurityGroup'
          Subnets:
          - Fn::ImportValue:
              !Sub '${ProjectName}:PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${ProjectName}:PrivateSubnet2'
      HealthCheckGracePeriodSeconds: 150
      LoadBalancers:
      - ContainerName: !Ref ContainerNameC
        ContainerPort: !Ref ServiceCContainerPort
        TargetGroupArn: !Ref ServiceCTargetGroup